generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  name                  String?
  password              String?
  imagePath             String?
  bio                   String?
  ideas                 Idea[]
  comments              Comment[]
  likes                 Like[]
  bookmarks             Bookmark[]
  followers             Follower[]     @relation("Followings")
  following             Follower[]     @relation("Followers")
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  session               Session[]
  createdAt             DateTime       @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Idea {
  id            Int            @id @default(autoincrement())
  title         String
  content       Json?
  imagePath     String?
  published     Boolean        @default(false)
  tags          String[]
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  idea      Idea?    @relation(fields: [ideaId], references: [id])
  ideaId    Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Like {
  id     Int    @id @default(autoincrement())
  idea   Idea   @relation(fields: [ideaId], references: [id])
  ideaId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([ideaId, userId])
}

model Bookmark {
  id     Int    @id @default(autoincrement())
  idea   Idea   @relation(fields: [ideaId], references: [id])
  ideaId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([ideaId, userId])
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Followings", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model Notification {
  id          Int       @id @default(autoincrement())
  type        String
  content     String?
  recipient   User      @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  issuer      User      @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  issuerId    String
  idea        Idea?     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      Int?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
}
